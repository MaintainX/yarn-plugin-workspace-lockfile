/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-workspace-lockfile",
factory: function (require) {
"use strict";var plugin=(()=>{var b=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var I=(n=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(n,{get:(r,t)=>(typeof require<"u"?require:r)[t]}):n)(function(n){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+n+'" is not supported')});var v=(n,r)=>{for(var t in r)b(n,t,{get:r[t],enumerable:!0})},U=(n,r,t,m)=>{if(r&&typeof r=="object"||typeof r=="function")for(let p of E(r))!P.call(n,p)&&p!==t&&b(n,p,{get:()=>r[p],enumerable:!(m=S(r,p))||m.enumerable});return n};var V=n=>U(b({},"__esModule",{value:!0}),n);var F={};v(F,{default:()=>C});var e=I("@yarnpkg/core"),y=I("@yarnpkg/fslib");function R(n,r,t){let m=e.structUtils.makeDescriptor(e.structUtils.parseIdent(r),t.startsWith("npm:")?t:`npm:${t}`);return n.storedResolutions.has(m.descriptorHash)}async function k(n,r,t){let m=n.manifest.raw.name||n.cwd;t.reportInfo(e.MessageName.UNNAMED,`Generating lockfile for ${m}...`);try{let p=new Set,$=n.manifest;for(let g of["dependencies","devDependencies","peerDependencies"]){let s=$.getForScope(g);r.configuration.get("enableVerboseLogging")&&t.reportInfo(e.MessageName.UNNAMED,`Found ${s.size} ${g}`);for(let o of s.values()){let l=r.workspaces.find(f=>f.manifest.raw.name===o.name||f.manifest.raw.name===`@${o.scope}/${o.name}`);if(l){let f=e.structUtils.makeDescriptor(e.structUtils.makeIdent(o.scope||"",o.name),o.range);p.add(f),r.configuration.get("enableVerboseLogging")&&t.reportInfo(e.MessageName.UNNAMED,`Added workspace dependency: ${e.structUtils.stringifyDescriptor(f)}`);for(let c of["dependencies","devDependencies","peerDependencies"]){let i=l.manifest.getForScope(c);for(let d of i.values()){let a=e.structUtils.makeDescriptor(e.structUtils.makeIdent(d.scope||"npm",d.name),d.range);p.add(a),r.configuration.get("enableVerboseLogging")&&t.reportInfo(e.MessageName.UNNAMED,`Added transitive dependency from workspace: ${e.structUtils.stringifyDescriptor(a)}`)}}}else{let f=o.scope?`@${o.scope}/${o.name}`:o.name,c=e.structUtils.parseIdent(f),i=o.range.startsWith("workspace:")||o.range.startsWith("npm:")?o.range:`npm:${o.range}`,d=e.structUtils.makeDescriptor(c,i);p.add(d),r.configuration.get("enableVerboseLogging")&&t.reportInfo(e.MessageName.UNNAMED,`Added dependency: ${e.structUtils.stringifyDescriptor(d)}`)}}}let N=new Map,W=new Set,D=new Map,M=g=>{let s=e.structUtils.parseDescriptor(g);return s.range.startsWith("workspace:")?e.structUtils.stringifyDescriptor(s):e.structUtils.stringifyDescriptor(e.structUtils.makeDescriptor(s,`npm:${s.range.replace(/^npm:/,"")}`))},w=g=>{let s=e.structUtils.stringifyDescriptor(g),o=M(s);if(W.has(o))return;W.add(o);let l=r.storedResolutions.get(g.descriptorHash);if(!l){r.configuration.get("enableVerboseLogging")&&t.reportInfo(e.MessageName.UNNAMED,`No resolution found for ${s}`);return}D.has(l)||D.set(l,new Set),D.get(l).add(g);let f=r.storedPackages.get(l);if(!f){r.configuration.get("enableVerboseLogging")&&t.reportInfo(e.MessageName.UNNAMED,`No package found for ${s}`);return}for(let[c,i]of f.dependencies)w(i);for(let[c,i]of f.peerDependencies)w(i)};for(let g of p)w(g);for(let[g,s]of D){let o=r.storedPackages.get(g);if(!o)continue;let l=Array.from(s).map(d=>e.structUtils.stringifyDescriptor(d)).filter(d=>!d.includes("virtual:")).sort();if(l.length===0)continue;let f=l.join(", "),c=new Map,i=new Map;for(let[d,a]of o.dependencies){let u=a.range.startsWith("virtual:")?`npm:${a.range.replace(/^virtual:[^#]+#npm:/,"")}`:a.range.startsWith("workspace:")||a.range.startsWith("npm:")?a.range:`npm:${a.range}`;c.set(e.structUtils.stringifyIdent(a),u)}for(let[d,a]of o.peerDependencies){let u=e.structUtils.stringifyIdent(a),h=a.range.startsWith("virtual:")?`npm:${a.range.replace(/^virtual:[^#]+#npm:/,"")}`:a.range.startsWith("workspace:")||a.range.startsWith("npm:")?a.range:`npm:${a.range}`;if(u.startsWith("@types/")&&!R(r,u,h)){r.configuration.get("enableVerboseLogging")&&t.reportInfo(e.MessageName.UNNAMED,`Skipping @types peer dependency not in main lockfile: ${u}@${h}`);continue}i.set(u,h)}N.set(f,{version:o.version,resolution:e.structUtils.stringifyLocator(o),checksum:o.identHash,dependencies:c,peerDependencies:i})}r.configuration.get("enableVerboseLogging")&&t.reportInfo(e.MessageName.UNNAMED,`Generated ${N.size} entries for workspace lockfile`);let L=Array.from(N.entries()).sort(([g],[s])=>g.localeCompare(s)).map(([g,s])=>{let o=s.dependencies.size>0?`  dependencies:
${Array.from(s.dependencies.entries()).sort(([c],[i])=>c.localeCompare(i)).map(([c,i])=>{let d=i.startsWith("workspace:")?i:`npm:${i.replace(/^npm:/,"")}`;return`    ${c.startsWith("@")?`"${c}"`:c}: "${d}"`}).join(`
`)}`:"",l=s.peerDependencies.size>0?`  peerDependencies:
${Array.from(s.peerDependencies.entries()).sort(([c],[i])=>c.localeCompare(i)).map(([c,i])=>{let d=i.startsWith("workspace:")?i:`npm:${i.replace(/^npm:/,"")}`;return`    ${c.startsWith("@")?`"${c}"`:c}: "${d}"`}).join(`
`)}`:"";return[`"${g}":`,`  version: ${s.version||"unknown"}`,`  resolution: "${s.resolution}"`,o,l].filter(Boolean).join(`
`)+`
`}).join(`
`),A=y.ppath.join(n.cwd,"yarn.workspace.lock");await y.xfs.writeFilePromise(A,L),t.reportInfo(e.MessageName.UNNAMED,`Created ${A}`)}catch(p){let $=p instanceof Error?p.message:String(p);t.reportError(e.MessageName.UNNAMED,`Failed to generate lockfile for ${m}: ${$}`)}}var z={configuration:{enableVerboseLogging:{description:"If true, enables verbose logging for workspace lockfile generation",type:e.SettingsType.BOOLEAN,default:!1}},hooks:{async afterAllInstalled(n,r){for(let t of n.workspaces)await k(t,n,r.report)},async afterWorkspaceDependencyAddition(n,r,t,m){await e.StreamReport.start({configuration:n.project.configuration,stdout:process.stdout},async p=>{await k(n,n.project,p)})},async afterWorkspaceDependencyRemoval(n,r,t){await e.StreamReport.start({configuration:n.project.configuration,stdout:process.stdout},async m=>{await k(n,n.project,m)})},async afterWorkspaceDependencyReplacement(n,r,t,m){await e.StreamReport.start({configuration:n.project.configuration,stdout:process.stdout},async p=>{await k(n,n.project,p)})}}},C=z;return V(F);})();
return plugin;
}
};
