/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-workspace-lockfile",
factory: function (require) {
"use strict";var plugin=(()=>{var w=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var I=(n=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(n,{get:(r,o)=>(typeof require<"u"?require:r)[o]}):n)(function(n){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+n+'" is not supported')});var S=(n,r)=>{for(var o in r)w(n,o,{get:r[o],enumerable:!0})},h=(n,r,o,l)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of W(r))!E.call(n,s)&&s!==o&&w(n,s,{get:()=>r[s],enumerable:!(l=L(r,s))||l.enumerable});return n};var U=n=>h(w({},"__esModule",{value:!0}),n);var R={};S(R,{default:()=>V});var e=I("@yarnpkg/core"),u=I("@yarnpkg/fslib");async function D(n,r,o){if(n.cwd===r.cwd)return;let l=n.manifest.raw.name||n.cwd;o.reportInfo(e.MessageName.UNNAMED,`Generating lockfile for ${l}...`);try{let s=new Set,k=n.manifest;for(let g of["dependencies","devDependencies","peerDependencies"]){let i=k.getForScope(g);r.configuration.get("enableVerboseLogging")&&o.reportInfo(e.MessageName.UNNAMED,`Found ${i.size} ${g}`);for(let t of i.values()){let m=r.workspaces.find(a=>a.manifest.raw.name===t.name||a.manifest.raw.name===`@${t.scope}/${t.name}`);if(m){let a=e.structUtils.makeDescriptor(e.structUtils.makeIdent(t.scope||"",t.name),t.range);s.add(a),r.configuration.get("enableVerboseLogging")&&o.reportInfo(e.MessageName.UNNAMED,`Added workspace dependency: ${e.structUtils.stringifyDescriptor(a)}`);for(let d of["dependencies","devDependencies","peerDependencies"]){let c=m.manifest.getForScope(d);for(let p of c.values()){let f=e.structUtils.makeDescriptor(e.structUtils.makeIdent(p.scope||"npm",p.name),p.range);s.add(f),r.configuration.get("enableVerboseLogging")&&o.reportInfo(e.MessageName.UNNAMED,`Added transitive dependency from workspace: ${e.structUtils.stringifyDescriptor(f)}`)}}}else{let a=t.scope?`@${t.scope}/${t.name}`:t.name,d=e.structUtils.parseIdent(a),c=t.range.startsWith("workspace:")||t.range.startsWith("npm:")?t.range:`npm:${t.range}`,p=e.structUtils.makeDescriptor(d,c);s.add(p),r.configuration.get("enableVerboseLogging")&&o.reportInfo(e.MessageName.UNNAMED,`Added dependency: ${e.structUtils.stringifyDescriptor(p)}`)}}}let y=new Map,N=new Set,b=g=>{let i=e.structUtils.parseDescriptor(g);return i.range.startsWith("workspace:")?e.structUtils.stringifyDescriptor(i):e.structUtils.stringifyDescriptor(e.structUtils.makeDescriptor(i,`npm:${i.range.replace(/^npm:/,"")}`))},$=g=>{let i=e.structUtils.stringifyDescriptor(g),t=b(i);if(N.has(t))return;N.add(t);let m=r.storedResolutions.get(g.descriptorHash);if(!m){r.configuration.get("enableVerboseLogging")&&o.reportInfo(e.MessageName.UNNAMED,`No resolution found for ${i}`);return}let a=r.storedPackages.get(m);if(!a){r.configuration.get("enableVerboseLogging")&&o.reportInfo(e.MessageName.UNNAMED,`No package found for ${i}`);return}let d=new Map,c=new Map;for(let[p,f]of a.dependencies)d.set(e.structUtils.stringifyIdent(f),f.range),$(f);for(let[p,f]of a.peerDependencies)c.set(e.structUtils.stringifyIdent(f),f.range),$(f);y.set(t,{version:a.version,resolution:e.structUtils.stringifyLocator(a),dependencies:d,peerDependencies:c})};for(let g of s)$(g);r.configuration.get("enableVerboseLogging")&&o.reportInfo(e.MessageName.UNNAMED,`Generated ${y.size} entries for workspace lockfile`);let M=Array.from(y.entries()).map(([g,i])=>{let t=b(g),m=i.dependencies.size>0?`  dependencies:
${Array.from(i.dependencies.entries()).map(([d,c])=>{let p=c.startsWith("workspace:")?c:`npm:${c.replace(/^npm:/,"")}`;return`    "${d}": "${p}"
`}).join("")}`:"",a=i.peerDependencies.size>0?`  peerDependencies:
${Array.from(i.peerDependencies.entries()).map(([d,c])=>{let p=c.startsWith("workspace:")?c:`npm:${c.replace(/^npm:/,"")}`;return`    "${d}": "${p}"
`}).join("")}`:"";return`"${t}":
  version: "${i.version||"unknown"}"
  resolution: "${i.resolution}"
${m}${a}`}).join(`
`),A=u.ppath.join(n.cwd,"yarn.workspace.lock");await u.xfs.writeFilePromise(A,M),o.reportInfo(e.MessageName.UNNAMED,`Created ${A}`)}catch(s){let k=s instanceof Error?s.message:String(s);o.reportError(e.MessageName.UNNAMED,`Failed to generate lockfile for ${l}: ${k}`)}}var P={configuration:{enableVerboseLogging:{description:"If true, enables verbose logging for workspace lockfile generation",type:e.SettingsType.BOOLEAN,default:!1}},hooks:{async afterAllInstalled(n,r){for(let o of n.workspaces)await D(o,n,r.report)},async afterWorkspaceDependencyAddition(n,r,o,l){await e.StreamReport.start({configuration:n.project.configuration,stdout:process.stdout},async s=>{await D(n,n.project,s)})},async afterWorkspaceDependencyRemoval(n,r,o){await e.StreamReport.start({configuration:n.project.configuration,stdout:process.stdout},async l=>{await D(n,n.project,l)})},async afterWorkspaceDependencyReplacement(n,r,o,l){await e.StreamReport.start({configuration:n.project.configuration,stdout:process.stdout},async s=>{await D(n,n.project,s)})}}},V=P;return U(R);})();
return plugin;
}
};
